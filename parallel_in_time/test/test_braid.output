
Starting braid_TestInitAccess

   braid_TestInitAccess:   Starting Test 1
   braid_TestInitAccess:   u = init(t=2.00e-01)
   braid_TestInitAccess:   access(u) 
Cycle 0:
   Number of active cells:       12288
   Number of degrees of freedom: 12545

cycle cells dofs     L2        H1      Linfty   
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
   braid_TestInitAccess:   check output: wrote u for initial condition at t=2.00e-01. 

   braid_TestInitAccess:   free(u) 
Finished braid_TestInitAccess

Starting braid_TestClone

   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=2.00e-01)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   access(u)
Cycle 0:
   Number of active cells:       12288
   Number of degrees of freedom: 12545

cycle cells dofs     L2        H1      Linfty   
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
   braid_TestClone:   access(v)
Cycle 0:
   Number of active cells:       12288
   Number of degrees of freedom: 12545

cycle cells dofs     L2        H1      Linfty   
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
   braid_TestClone:   check output:  wrote u and v for initial condition at t=2.00e-01.

   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone

Starting braid_TestSum

   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=2.00e-01)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   access(v)
Cycle 0:
   Number of active cells:       12288
   Number of degrees of freedom: 12545

cycle cells dofs     L2        H1      Linfty   
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 3.225e-04 2.865e-03 3.723e-04 
   braid_TestSum:   check output:  v should equal the zero vector

   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   access(v)
Cycle 0:
   Number of active cells:       12288
   Number of degrees of freedom: 12545

cycle cells dofs     L2        H1      Linfty   
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 3.225e-04 2.865e-03 3.723e-04 
    0 12288 12545 1.732e+00 1.539e+01 2.003e+00 
   braid_TestSum:   access(u)
Cycle 0:
   Number of active cells:       12288
   Number of degrees of freedom: 12545

cycle cells dofs     L2        H1      Linfty   
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
    0 12288 12545 3.225e-04 2.865e-03 3.723e-04 
    0 12288 12545 1.732e+00 1.539e+01 2.003e+00 
    0 12288 12545 8.657e-01 7.696e+00 1.001e+00 
   braid_TestSum:   check output:  v should equal 2*u 

   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum

Starting braid_TestSpatialNorm

   braid_TestSpatialNorm:   Starting Test 1
   braid_TestSpatialNorm:   u = init(t=2.00e-01)
   braid_TestSpatialNorm:   spatialnorm(u) 
   braid_TestSpatialNorm:   v = clone(u)
   braid_TestSpatialNorm:   v = u - v 
   braid_TestSpatialNorm:   spatialnorm(v) 
   braid_TestSpatialNorm:   Test 1 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestSpatialNorm:   expected output:  spatialnorm(v) = 0.0 

   braid_TestSpatialNorm:   Starting Test 2
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = u + w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 2 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 1.13e+02 / 5.67e+01 = 2.00e+00 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 2.0 

   braid_TestSpatialNorm:   Starting Test 3
   braid_TestSpatialNorm:   free(w)
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = 0.0*u + 0.5*w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 3 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 2.83e+01 / 5.67e+01 = 5.00e-01 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 0.5 

   braid_TestSpatialNorm:   free(u)
   braid_TestSpatialNorm:   free(v)
   braid_TestSpatialNorm:   free(w)
Finished braid_TestSpatialNorm: all tests passed successfully

Starting braid_TestBuf

   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=2.00e-01)
   braid_TestBuf:   spatialnorm(u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   spatialnorm(v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestBuf:   expected output:  spatialnorm(v) = 0.0 

   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully
